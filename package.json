{
  "name": "mongo-migrate",
  "version": "0.0.4",
  "description": "Migration framework for mongo in node",
  "keywords": [
    "mongo",
    "migrate",
    "migrations"
  ],
  "author": {
    "name": "Austin Floyd",
    "email": "austin.floyd@sparcedge.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/afloyd/mongo-migrate"
  },
  "devDependencies": {
    "mongodb": "1.1.11"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.8.x"
  },
  "readme": "#mongo-migrate\r\n=============\r\n\r\nBuilt with a starting framework from: https://github.com/visionmedia/node-migrate\r\n\r\n\r\n## Installation\r\n\t$ npm install mongo-migrate\r\n\t\r\n##Usage\r\n```\r\nUsage: node mongo-migrate [options] [command]\r\n\r\nOptions:\r\n\t-runmm, --runMongoMIgrate\t\tRun the migration from the command line\r\n\t-c, --chdir <path>\t\t\t\tChange the working directory (if you wish to store your migrations outside of this folder\r\n\t-cfg, --config <filename>\t\tDB config file name\r\n\t--dbn, --dbPropName <string>\t\tProperty name for the database connection in the config file. The configuration file should \r\n\t\t\t\t\t\t\t\t\tcontain something like \r\n\t\t\t\t\t\t\t\t\t{ \t\r\n\t\t\t\t\t\t\t\t\t\tappDb : { //appDb would be the dbPropName\r\n\t\t\t\t\t\t\t\t\t\t\thost: 'localhost', \r\n\t\t\t\t\t\t\t\t\t\t\tdb: 'mydbname',\r\n\t\t\t\t\t\t\t\t\t\t\t//port: '27017' //include a port if necessary\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\nCommands:\r\n\tdown [revision]\t\tmigrate down (stop at optional revision name/number)\r\n\tup [revision]\t\tmigrate up (stop at optional revision name/number)\r\n\tcreate [title]\t\tcreate a new migration file with optional [title]\r\n```\r\n\r\n##Creating Migrations\r\nTo create a migration execute with `node mongo-migrate create` and optionally a title. mongo-migrate will create a node module within `./migrations/` which contains the following two exports:\r\n```\r\nvar mongodb = require('mongodb');\r\n\r\nexports.up = function (db, next) {\r\n\tnext();\r\n};\r\n\r\nexports.down = function (db. mext) {\r\n\tnext();\r\n};\r\n```\r\n\r\nAll you have to do is populate these, invoking `next()` when complete, and you are ready to migrate! If you detect an error during the `exports.up` or `exports.down` pass next(err) and the migration will attempt to revert the opposite direction. If you're migrating up and error, it'll try to do that migration down.\r\n\r\nFor example:\r\n\r\n```\r\n\t$ node mongo-migrate -runmm create add-pets\r\n\t$ node mongo-migrate -runmm create add-owners\r\n```\r\n\r\nThe first call creates `./migrations/0005-add-pets.js`, which we can populate:\r\n```\r\nexports.up = function (db, next) {\r\n\tvar pets = mongodb.Collection(db, 'pets');\r\n\tpets.insert({name: 'tobi'}, next);\r\n};\r\n\r\nexports.down = function (db, next) {\r\n\tvar pets = mongodb.Collection(db, 'pets');\r\n\tpets.findAndModify({name: 'tobi'}, [], {}, { remove: true }, next);\r\n};\r\n```\r\n\r\nThe second creates `./migrations/0010-add-owners.js`, which we can populate:\r\n```\r\n\texports.up = function(db, next){\r\n\t\tvar owners = mongodb.Collection(db, 'owners');\r\n\t\towners.insert({name: 'taylor'}, next);\t\t\r\n    };\r\n\r\n\texports.down = function(db, next){\r\n\t\tvar owners = mongodb.Collection(db, 'owners');\r\n\t\tpets.findAndModify({name: 'taylor'}, [], {}, { remove: true }, next);\r\n\t};\r\n```\r\n\r\n## Running Migrations\r\nWhen first running the migrations, all will be executed in sequence.\r\n\r\n```\r\n\tnode mongo-migrate -runmm\r\n\tup : migrations/0005-add-pets.js\r\n\tup : migrations/0010-add-owners.js\r\n\tmigration : complete\r\n```\r\n\r\nSubsequent attempts will simply output \"complete\", as they have already been executed on the given database. `mongo-migrate` knows this because it stores migrations already run against the database in the `migrations` collection.\r\n```\r\n\t$ node mongo-migrate -runmm\r\n\tmigration : complete\r\n```\r\n\r\nIf we were to create another migration using `mongo-migrate create coolest-owner`, and then execute migrations again, we would execute only those not previously executed:\r\n```\r\n\t$ node mongo-migrate -runmm\r\n\tup : migrations/0015-coolest-owner\r\n```\r\n\r\nIf we were to then migrate using `mongo-migrate down 5`. This means to run from current revision, which in this case would be `0015-coolecst-owner`, down to revision number 5. Note that you can use either the revision number, or then full revision name `0005-add-pets`\r\n```\r\n\t$ node mongo-migrate -runmm down 5\r\n\tdown : migrations/0015-coolest-owner\r\n\tdown : migrations/0010-add-owners\r\n```\r\n\r\n## Configuration\r\n### Working Directory\r\nThe options for connecting to the database are read in from a file. You can configure where the file is read in from and where the migration directory root is by the `-c <path>` option.\r\n```\r\n\t$ node mongo-migrate -c ../.. up\r\n\tmigration : complete\r\n```\r\nThis would set the working directory two levels above the mongo-migrate directory, such as if you included it into another project and it was nested in the node_modules folder.\r\n\r\n### Config filename\r\nThe default configuration filename is `default-config.json`. If you wish to use a different filename, use the `-cfg <filename>` option:\r\n```\r\n\t$ node mongo-migrate -cfg my-config.json up\r\n\tmigration : complete\r\n```\r\n\r\n### Config file property name\r\nInside the configuration file, mongo-migrate expects the database connection information to be nested inside an object. The default object name is `mongoAppDb`. If you wish to change this you can use the `-dbn <string>` option:\r\n```\r\n\t$ node mongo-migrate -dbn dbSettings up\r\n\tmigration : complete\r\n```\r\nThis would tell mongo-migrate your config file looks something like:\r\n```\r\n\t{\r\n\t\tdbSettings: {\r\n\t\t\thost: 'localhost',\r\n\t\t\tdb: 'myDatabaseName',\r\n\t\t\t//port: 27017 //Specifying a port is optional\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\nAll of these settings can be combined as desired, except for the up/down obviously ;)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(The MIT License)\r\n\r\nCopyright &copy; 2013 Austin Floyd &lt;austin.floyd@sparcedge.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "mongo-migrate@0.0.4",
  "_from": "mongo-migrate@",
  "dependencies": {
    "nodelogger": "https://github.com/mccormicka/nodelogger/archive/master.tar.gz"
  }
}
